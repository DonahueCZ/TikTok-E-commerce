// Code generated by Kitex v0.9.1. DO NOT EDIT.

package paymentservice

import (
	"context"
	payment "github.com/MelodyDeep/TikTok-E-commerce/rpc_gen/kitex_gen/rpc/payment"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	ProcessPayment(ctx context.Context, Req *payment.PaymentRequest, callOptions ...callopt.Option) (r *payment.PaymentResponse, err error)
	CancelPayment(ctx context.Context, Req *payment.CancelRequest, callOptions ...callopt.Option) (r *payment.PaymentResponse, err error)
	HandlePaymentTimeout(ctx context.Context, Req *payment.PaymentTimeoutRequest, callOptions ...callopt.Option) (r *payment.PaymentResponse, err error)
	GetOrderByID(ctx context.Context, Req *payment.OrderRequest, callOptions ...callopt.Option) (r *payment.OrderResponse, err error)
	UpdateOrderStatus(ctx context.Context, Req *payment.UpdateStatusRequest, callOptions ...callopt.Option) (r *payment.PaymentResponse, err error)
	DeleteOrder(ctx context.Context, Req *payment.DeleteOrderRequest, callOptions ...callopt.Option) (r *payment.PaymentResponse, err error)
	CreateOrder(ctx context.Context, Req *payment.CreateOrderRequest, callOptions ...callopt.Option) (r *payment.OrderResponse, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kPaymentServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kPaymentServiceClient struct {
	*kClient
}

func (p *kPaymentServiceClient) ProcessPayment(ctx context.Context, Req *payment.PaymentRequest, callOptions ...callopt.Option) (r *payment.PaymentResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ProcessPayment(ctx, Req)
}

func (p *kPaymentServiceClient) CancelPayment(ctx context.Context, Req *payment.CancelRequest, callOptions ...callopt.Option) (r *payment.PaymentResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CancelPayment(ctx, Req)
}

func (p *kPaymentServiceClient) HandlePaymentTimeout(ctx context.Context, Req *payment.PaymentTimeoutRequest, callOptions ...callopt.Option) (r *payment.PaymentResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.HandlePaymentTimeout(ctx, Req)
}

func (p *kPaymentServiceClient) GetOrderByID(ctx context.Context, Req *payment.OrderRequest, callOptions ...callopt.Option) (r *payment.OrderResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetOrderByID(ctx, Req)
}

func (p *kPaymentServiceClient) UpdateOrderStatus(ctx context.Context, Req *payment.UpdateStatusRequest, callOptions ...callopt.Option) (r *payment.PaymentResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UpdateOrderStatus(ctx, Req)
}

func (p *kPaymentServiceClient) DeleteOrder(ctx context.Context, Req *payment.DeleteOrderRequest, callOptions ...callopt.Option) (r *payment.PaymentResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DeleteOrder(ctx, Req)
}

func (p *kPaymentServiceClient) CreateOrder(ctx context.Context, Req *payment.CreateOrderRequest, callOptions ...callopt.Option) (r *payment.OrderResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CreateOrder(ctx, Req)
}
