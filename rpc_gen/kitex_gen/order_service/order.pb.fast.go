// Code generated by Fastpb v0.0.2. DO NOT EDIT.

package order_service

import (
	fmt "fmt"
	fastpb "github.com/cloudwego/fastpb"
)

var (
	_ = fmt.Errorf
	_ = fastpb.Skip
)

func (x *CreateOrderRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CreateOrderRequest[number], err)
}

func (x *CreateOrderRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.UserId, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *CreateOrderRequest) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.GoodsId, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *CreateOrderRequest) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.GoodsCount, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *CreateOrderRequest) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.Cost, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *CreateOrderRequest) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	var v AddresseeInfo
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.AddresseeInfo = &v
	return offset, nil
}

func (x *QueryOrderByIdRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_QueryOrderByIdRequest[number], err)
}

func (x *QueryOrderByIdRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.OrderId, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *QueryOrderResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_QueryOrderResponse[number], err)
}

func (x *QueryOrderResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v OrderResponse
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.OrderResponse = &v
	return offset, nil
}

func (x *QueryOrdersByUserIdRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_QueryOrdersByUserIdRequest[number], err)
}

func (x *QueryOrdersByUserIdRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.UserId, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *QueryOrdersByUserIdRequest) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.PageNum, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *QueryOrdersByUserIdRequest) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.PageSize, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *QueryOrdersResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_QueryOrdersResponse[number], err)
}

func (x *QueryOrdersResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v OrderResponse
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.OrderResponses = append(x.OrderResponses, &v)
	return offset, nil
}

func (x *OrderResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 8:
		offset, err = x.fastReadField8(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_OrderResponse[number], err)
}

func (x *OrderResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.OrderId, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *OrderResponse) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.UserId, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *OrderResponse) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.GoodsId, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *OrderResponse) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.Status, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *OrderResponse) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.CreateTime, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *OrderResponse) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	var v AddresseeInfo
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.AddresseeInfo = &v
	return offset, nil
}

func (x *OrderResponse) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	x.GoodsCount, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *OrderResponse) fastReadField8(buf []byte, _type int8) (offset int, err error) {
	x.Cost, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *UpdateOrderRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_UpdateOrderRequest[number], err)
}

func (x *UpdateOrderRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.OrderId, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *UpdateOrderRequest) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Status, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *UpdateOrderRequest) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.GoodsCount, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *UpdateOrderRequest) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.Cost, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *UpdateOrderRequest) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	var v AddresseeInfo
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.AddresseeInfo = &v
	return offset, nil
}

func (x *UpdateOrderStatusRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_UpdateOrderStatusRequest[number], err)
}

func (x *UpdateOrderStatusRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.OrderId, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *UpdateOrderStatusRequest) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Status, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *UpdateOrderAddresseeInfoRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_UpdateOrderAddresseeInfoRequest[number], err)
}

func (x *UpdateOrderAddresseeInfoRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.OrderId, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *UpdateOrderAddresseeInfoRequest) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v AddresseeInfo
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.AddresseeInfo = &v
	return offset, nil
}

func (x *AddresseeInfo) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_AddresseeInfo[number], err)
}

func (x *AddresseeInfo) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Name, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *AddresseeInfo) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Phone, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *AddresseeInfo) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Address, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *BaseResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_BaseResponse[number], err)
}

func (x *BaseResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Code, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *BaseResponse) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Msg, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CreateOrderRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	return offset
}

func (x *CreateOrderRequest) fastWriteField1(buf []byte) (offset int) {
	if x.UserId == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetUserId())
	return offset
}

func (x *CreateOrderRequest) fastWriteField2(buf []byte) (offset int) {
	if x.GoodsId == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetGoodsId())
	return offset
}

func (x *CreateOrderRequest) fastWriteField3(buf []byte) (offset int) {
	if x.GoodsCount == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 3, x.GetGoodsCount())
	return offset
}

func (x *CreateOrderRequest) fastWriteField4(buf []byte) (offset int) {
	if x.Cost == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 4, x.GetCost())
	return offset
}

func (x *CreateOrderRequest) fastWriteField5(buf []byte) (offset int) {
	if x.AddresseeInfo == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 5, x.GetAddresseeInfo())
	return offset
}

func (x *QueryOrderByIdRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *QueryOrderByIdRequest) fastWriteField1(buf []byte) (offset int) {
	if x.OrderId == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetOrderId())
	return offset
}

func (x *QueryOrderResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *QueryOrderResponse) fastWriteField1(buf []byte) (offset int) {
	if x.OrderResponse == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetOrderResponse())
	return offset
}

func (x *QueryOrdersByUserIdRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *QueryOrdersByUserIdRequest) fastWriteField1(buf []byte) (offset int) {
	if x.UserId == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetUserId())
	return offset
}

func (x *QueryOrdersByUserIdRequest) fastWriteField2(buf []byte) (offset int) {
	if x.PageNum == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 2, x.GetPageNum())
	return offset
}

func (x *QueryOrdersByUserIdRequest) fastWriteField3(buf []byte) (offset int) {
	if x.PageSize == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 3, x.GetPageSize())
	return offset
}

func (x *QueryOrdersResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *QueryOrdersResponse) fastWriteField1(buf []byte) (offset int) {
	if x.OrderResponses == nil {
		return offset
	}
	for i := range x.GetOrderResponses() {
		offset += fastpb.WriteMessage(buf[offset:], 1, x.GetOrderResponses()[i])
	}
	return offset
}

func (x *OrderResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	offset += x.fastWriteField8(buf[offset:])
	return offset
}

func (x *OrderResponse) fastWriteField1(buf []byte) (offset int) {
	if x.OrderId == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetOrderId())
	return offset
}

func (x *OrderResponse) fastWriteField2(buf []byte) (offset int) {
	if x.UserId == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetUserId())
	return offset
}

func (x *OrderResponse) fastWriteField3(buf []byte) (offset int) {
	if x.GoodsId == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 3, x.GetGoodsId())
	return offset
}

func (x *OrderResponse) fastWriteField4(buf []byte) (offset int) {
	if x.Status == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 4, x.GetStatus())
	return offset
}

func (x *OrderResponse) fastWriteField5(buf []byte) (offset int) {
	if x.CreateTime == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 5, x.GetCreateTime())
	return offset
}

func (x *OrderResponse) fastWriteField6(buf []byte) (offset int) {
	if x.AddresseeInfo == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 6, x.GetAddresseeInfo())
	return offset
}

func (x *OrderResponse) fastWriteField7(buf []byte) (offset int) {
	if x.GoodsCount == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 7, x.GetGoodsCount())
	return offset
}

func (x *OrderResponse) fastWriteField8(buf []byte) (offset int) {
	if x.Cost == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 8, x.GetCost())
	return offset
}

func (x *UpdateOrderRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	return offset
}

func (x *UpdateOrderRequest) fastWriteField1(buf []byte) (offset int) {
	if x.OrderId == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetOrderId())
	return offset
}

func (x *UpdateOrderRequest) fastWriteField2(buf []byte) (offset int) {
	if x.Status == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 2, x.GetStatus())
	return offset
}

func (x *UpdateOrderRequest) fastWriteField3(buf []byte) (offset int) {
	if x.GoodsCount == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 3, x.GetGoodsCount())
	return offset
}

func (x *UpdateOrderRequest) fastWriteField4(buf []byte) (offset int) {
	if x.Cost == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 4, x.GetCost())
	return offset
}

func (x *UpdateOrderRequest) fastWriteField5(buf []byte) (offset int) {
	if x.AddresseeInfo == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 5, x.GetAddresseeInfo())
	return offset
}

func (x *UpdateOrderStatusRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *UpdateOrderStatusRequest) fastWriteField1(buf []byte) (offset int) {
	if x.OrderId == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetOrderId())
	return offset
}

func (x *UpdateOrderStatusRequest) fastWriteField2(buf []byte) (offset int) {
	if x.Status == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 2, x.GetStatus())
	return offset
}

func (x *UpdateOrderAddresseeInfoRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *UpdateOrderAddresseeInfoRequest) fastWriteField1(buf []byte) (offset int) {
	if x.OrderId == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetOrderId())
	return offset
}

func (x *UpdateOrderAddresseeInfoRequest) fastWriteField2(buf []byte) (offset int) {
	if x.AddresseeInfo == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 2, x.GetAddresseeInfo())
	return offset
}

func (x *AddresseeInfo) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *AddresseeInfo) fastWriteField1(buf []byte) (offset int) {
	if x.Name == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetName())
	return offset
}

func (x *AddresseeInfo) fastWriteField2(buf []byte) (offset int) {
	if x.Phone == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetPhone())
	return offset
}

func (x *AddresseeInfo) fastWriteField3(buf []byte) (offset int) {
	if x.Address == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetAddress())
	return offset
}

func (x *BaseResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *BaseResponse) fastWriteField1(buf []byte) (offset int) {
	if x.Code == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 1, x.GetCode())
	return offset
}

func (x *BaseResponse) fastWriteField2(buf []byte) (offset int) {
	if x.Msg == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetMsg())
	return offset
}

func (x *CreateOrderRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	return n
}

func (x *CreateOrderRequest) sizeField1() (n int) {
	if x.UserId == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetUserId())
	return n
}

func (x *CreateOrderRequest) sizeField2() (n int) {
	if x.GoodsId == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetGoodsId())
	return n
}

func (x *CreateOrderRequest) sizeField3() (n int) {
	if x.GoodsCount == 0 {
		return n
	}
	n += fastpb.SizeInt32(3, x.GetGoodsCount())
	return n
}

func (x *CreateOrderRequest) sizeField4() (n int) {
	if x.Cost == 0 {
		return n
	}
	n += fastpb.SizeInt32(4, x.GetCost())
	return n
}

func (x *CreateOrderRequest) sizeField5() (n int) {
	if x.AddresseeInfo == nil {
		return n
	}
	n += fastpb.SizeMessage(5, x.GetAddresseeInfo())
	return n
}

func (x *QueryOrderByIdRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *QueryOrderByIdRequest) sizeField1() (n int) {
	if x.OrderId == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetOrderId())
	return n
}

func (x *QueryOrderResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *QueryOrderResponse) sizeField1() (n int) {
	if x.OrderResponse == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetOrderResponse())
	return n
}

func (x *QueryOrdersByUserIdRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *QueryOrdersByUserIdRequest) sizeField1() (n int) {
	if x.UserId == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetUserId())
	return n
}

func (x *QueryOrdersByUserIdRequest) sizeField2() (n int) {
	if x.PageNum == 0 {
		return n
	}
	n += fastpb.SizeInt32(2, x.GetPageNum())
	return n
}

func (x *QueryOrdersByUserIdRequest) sizeField3() (n int) {
	if x.PageSize == 0 {
		return n
	}
	n += fastpb.SizeInt32(3, x.GetPageSize())
	return n
}

func (x *QueryOrdersResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *QueryOrdersResponse) sizeField1() (n int) {
	if x.OrderResponses == nil {
		return n
	}
	for i := range x.GetOrderResponses() {
		n += fastpb.SizeMessage(1, x.GetOrderResponses()[i])
	}
	return n
}

func (x *OrderResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	n += x.sizeField7()
	n += x.sizeField8()
	return n
}

func (x *OrderResponse) sizeField1() (n int) {
	if x.OrderId == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetOrderId())
	return n
}

func (x *OrderResponse) sizeField2() (n int) {
	if x.UserId == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetUserId())
	return n
}

func (x *OrderResponse) sizeField3() (n int) {
	if x.GoodsId == 0 {
		return n
	}
	n += fastpb.SizeInt64(3, x.GetGoodsId())
	return n
}

func (x *OrderResponse) sizeField4() (n int) {
	if x.Status == 0 {
		return n
	}
	n += fastpb.SizeInt32(4, x.GetStatus())
	return n
}

func (x *OrderResponse) sizeField5() (n int) {
	if x.CreateTime == 0 {
		return n
	}
	n += fastpb.SizeInt64(5, x.GetCreateTime())
	return n
}

func (x *OrderResponse) sizeField6() (n int) {
	if x.AddresseeInfo == nil {
		return n
	}
	n += fastpb.SizeMessage(6, x.GetAddresseeInfo())
	return n
}

func (x *OrderResponse) sizeField7() (n int) {
	if x.GoodsCount == 0 {
		return n
	}
	n += fastpb.SizeInt32(7, x.GetGoodsCount())
	return n
}

func (x *OrderResponse) sizeField8() (n int) {
	if x.Cost == 0 {
		return n
	}
	n += fastpb.SizeInt32(8, x.GetCost())
	return n
}

func (x *UpdateOrderRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	return n
}

func (x *UpdateOrderRequest) sizeField1() (n int) {
	if x.OrderId == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetOrderId())
	return n
}

func (x *UpdateOrderRequest) sizeField2() (n int) {
	if x.Status == 0 {
		return n
	}
	n += fastpb.SizeInt32(2, x.GetStatus())
	return n
}

func (x *UpdateOrderRequest) sizeField3() (n int) {
	if x.GoodsCount == 0 {
		return n
	}
	n += fastpb.SizeInt32(3, x.GetGoodsCount())
	return n
}

func (x *UpdateOrderRequest) sizeField4() (n int) {
	if x.Cost == 0 {
		return n
	}
	n += fastpb.SizeInt32(4, x.GetCost())
	return n
}

func (x *UpdateOrderRequest) sizeField5() (n int) {
	if x.AddresseeInfo == nil {
		return n
	}
	n += fastpb.SizeMessage(5, x.GetAddresseeInfo())
	return n
}

func (x *UpdateOrderStatusRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *UpdateOrderStatusRequest) sizeField1() (n int) {
	if x.OrderId == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetOrderId())
	return n
}

func (x *UpdateOrderStatusRequest) sizeField2() (n int) {
	if x.Status == 0 {
		return n
	}
	n += fastpb.SizeInt32(2, x.GetStatus())
	return n
}

func (x *UpdateOrderAddresseeInfoRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *UpdateOrderAddresseeInfoRequest) sizeField1() (n int) {
	if x.OrderId == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetOrderId())
	return n
}

func (x *UpdateOrderAddresseeInfoRequest) sizeField2() (n int) {
	if x.AddresseeInfo == nil {
		return n
	}
	n += fastpb.SizeMessage(2, x.GetAddresseeInfo())
	return n
}

func (x *AddresseeInfo) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *AddresseeInfo) sizeField1() (n int) {
	if x.Name == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetName())
	return n
}

func (x *AddresseeInfo) sizeField2() (n int) {
	if x.Phone == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetPhone())
	return n
}

func (x *AddresseeInfo) sizeField3() (n int) {
	if x.Address == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetAddress())
	return n
}

func (x *BaseResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *BaseResponse) sizeField1() (n int) {
	if x.Code == 0 {
		return n
	}
	n += fastpb.SizeInt32(1, x.GetCode())
	return n
}

func (x *BaseResponse) sizeField2() (n int) {
	if x.Msg == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetMsg())
	return n
}

var fieldIDToName_CreateOrderRequest = map[int32]string{
	1: "UserId",
	2: "GoodsId",
	3: "GoodsCount",
	4: "Cost",
	5: "AddresseeInfo",
}

var fieldIDToName_QueryOrderByIdRequest = map[int32]string{
	1: "OrderId",
}

var fieldIDToName_QueryOrderResponse = map[int32]string{
	1: "OrderResponse",
}

var fieldIDToName_QueryOrdersByUserIdRequest = map[int32]string{
	1: "UserId",
	2: "PageNum",
	3: "PageSize",
}

var fieldIDToName_QueryOrdersResponse = map[int32]string{
	1: "OrderResponses",
}

var fieldIDToName_OrderResponse = map[int32]string{
	1: "OrderId",
	2: "UserId",
	3: "GoodsId",
	4: "Status",
	5: "CreateTime",
	6: "AddresseeInfo",
	7: "GoodsCount",
	8: "Cost",
}

var fieldIDToName_UpdateOrderRequest = map[int32]string{
	1: "OrderId",
	2: "Status",
	3: "GoodsCount",
	4: "Cost",
	5: "AddresseeInfo",
}

var fieldIDToName_UpdateOrderStatusRequest = map[int32]string{
	1: "OrderId",
	2: "Status",
}

var fieldIDToName_UpdateOrderAddresseeInfoRequest = map[int32]string{
	1: "OrderId",
	2: "AddresseeInfo",
}

var fieldIDToName_AddresseeInfo = map[int32]string{
	1: "Name",
	2: "Phone",
	3: "Address",
}

var fieldIDToName_BaseResponse = map[int32]string{
	1: "Code",
	2: "Msg",
}
