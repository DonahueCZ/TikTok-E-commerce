// Code generated by Kitex v0.12.1. DO NOT EDIT.

package orderservice

import (
	orderservice2 "TikTok-E-commerce-payment/kitex_gen/orderservice/orderservice"
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	proto "google.golang.org/protobuf/proto"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"CreateOrder": kitex.NewMethodInfo(
		createOrderHandler,
		newCreateOrderArgs,
		newCreateOrderResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"GetOrderByID": kitex.NewMethodInfo(
		getOrderByIDHandler,
		newGetOrderByIDArgs,
		newGetOrderByIDResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"UpdateOrderStatus": kitex.NewMethodInfo(
		updateOrderStatusHandler,
		newUpdateOrderStatusArgs,
		newUpdateOrderStatusResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"DeleteOrder": kitex.NewMethodInfo(
		deleteOrderHandler,
		newDeleteOrderArgs,
		newDeleteOrderResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
}

var (
	orderServiceServiceInfo                = NewServiceInfo()
	orderServiceServiceInfoForClient       = NewServiceInfoForClient()
	orderServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return orderServiceServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return orderServiceServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return orderServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "OrderService"
	handlerType := (*orderservice2.OrderService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "orderservice",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.12.1",
		Extra:           extra,
	}
	return svcInfo
}

func createOrderHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(orderservice2.CreateOrderRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(orderservice2.OrderService).CreateOrder(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *CreateOrderArgs:
		success, err := handler.(orderservice2.OrderService).CreateOrder(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CreateOrderResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newCreateOrderArgs() interface{} {
	return &CreateOrderArgs{}
}

func newCreateOrderResult() interface{} {
	return &CreateOrderResult{}
}

type CreateOrderArgs struct {
	Req *orderservice2.CreateOrderRequest
}

func (p *CreateOrderArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(orderservice2.CreateOrderRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *CreateOrderArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *CreateOrderArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *CreateOrderArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *CreateOrderArgs) Unmarshal(in []byte) error {
	msg := new(orderservice2.CreateOrderRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CreateOrderArgs_Req_DEFAULT *orderservice2.CreateOrderRequest

func (p *CreateOrderArgs) GetReq() *orderservice2.CreateOrderRequest {
	if !p.IsSetReq() {
		return CreateOrderArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CreateOrderArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CreateOrderArgs) GetFirstArgument() interface{} {
	return p.Req
}

type CreateOrderResult struct {
	Success *orderservice2.CreateOrderResponse
}

var CreateOrderResult_Success_DEFAULT *orderservice2.CreateOrderResponse

func (p *CreateOrderResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(orderservice2.CreateOrderResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *CreateOrderResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *CreateOrderResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *CreateOrderResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *CreateOrderResult) Unmarshal(in []byte) error {
	msg := new(orderservice2.CreateOrderResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CreateOrderResult) GetSuccess() *orderservice2.CreateOrderResponse {
	if !p.IsSetSuccess() {
		return CreateOrderResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CreateOrderResult) SetSuccess(x interface{}) {
	p.Success = x.(*orderservice2.CreateOrderResponse)
}

func (p *CreateOrderResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CreateOrderResult) GetResult() interface{} {
	return p.Success
}

func getOrderByIDHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(orderservice2.GetOrderRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(orderservice2.OrderService).GetOrderByID(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *GetOrderByIDArgs:
		success, err := handler.(orderservice2.OrderService).GetOrderByID(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetOrderByIDResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newGetOrderByIDArgs() interface{} {
	return &GetOrderByIDArgs{}
}

func newGetOrderByIDResult() interface{} {
	return &GetOrderByIDResult{}
}

type GetOrderByIDArgs struct {
	Req *orderservice2.GetOrderRequest
}

func (p *GetOrderByIDArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(orderservice2.GetOrderRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetOrderByIDArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetOrderByIDArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetOrderByIDArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetOrderByIDArgs) Unmarshal(in []byte) error {
	msg := new(orderservice2.GetOrderRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetOrderByIDArgs_Req_DEFAULT *orderservice2.GetOrderRequest

func (p *GetOrderByIDArgs) GetReq() *orderservice2.GetOrderRequest {
	if !p.IsSetReq() {
		return GetOrderByIDArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetOrderByIDArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetOrderByIDArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetOrderByIDResult struct {
	Success *orderservice2.GetOrderResponse
}

var GetOrderByIDResult_Success_DEFAULT *orderservice2.GetOrderResponse

func (p *GetOrderByIDResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(orderservice2.GetOrderResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetOrderByIDResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetOrderByIDResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetOrderByIDResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetOrderByIDResult) Unmarshal(in []byte) error {
	msg := new(orderservice2.GetOrderResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetOrderByIDResult) GetSuccess() *orderservice2.GetOrderResponse {
	if !p.IsSetSuccess() {
		return GetOrderByIDResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetOrderByIDResult) SetSuccess(x interface{}) {
	p.Success = x.(*orderservice2.GetOrderResponse)
}

func (p *GetOrderByIDResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetOrderByIDResult) GetResult() interface{} {
	return p.Success
}

func updateOrderStatusHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(orderservice2.UpdateOrderStatusRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(orderservice2.OrderService).UpdateOrderStatus(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *UpdateOrderStatusArgs:
		success, err := handler.(orderservice2.OrderService).UpdateOrderStatus(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*UpdateOrderStatusResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newUpdateOrderStatusArgs() interface{} {
	return &UpdateOrderStatusArgs{}
}

func newUpdateOrderStatusResult() interface{} {
	return &UpdateOrderStatusResult{}
}

type UpdateOrderStatusArgs struct {
	Req *orderservice2.UpdateOrderStatusRequest
}

func (p *UpdateOrderStatusArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(orderservice2.UpdateOrderStatusRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *UpdateOrderStatusArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *UpdateOrderStatusArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *UpdateOrderStatusArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *UpdateOrderStatusArgs) Unmarshal(in []byte) error {
	msg := new(orderservice2.UpdateOrderStatusRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var UpdateOrderStatusArgs_Req_DEFAULT *orderservice2.UpdateOrderStatusRequest

func (p *UpdateOrderStatusArgs) GetReq() *orderservice2.UpdateOrderStatusRequest {
	if !p.IsSetReq() {
		return UpdateOrderStatusArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *UpdateOrderStatusArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UpdateOrderStatusArgs) GetFirstArgument() interface{} {
	return p.Req
}

type UpdateOrderStatusResult struct {
	Success *orderservice2.UpdateOrderStatusResponse
}

var UpdateOrderStatusResult_Success_DEFAULT *orderservice2.UpdateOrderStatusResponse

func (p *UpdateOrderStatusResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(orderservice2.UpdateOrderStatusResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *UpdateOrderStatusResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *UpdateOrderStatusResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *UpdateOrderStatusResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *UpdateOrderStatusResult) Unmarshal(in []byte) error {
	msg := new(orderservice2.UpdateOrderStatusResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *UpdateOrderStatusResult) GetSuccess() *orderservice2.UpdateOrderStatusResponse {
	if !p.IsSetSuccess() {
		return UpdateOrderStatusResult_Success_DEFAULT
	}
	return p.Success
}

func (p *UpdateOrderStatusResult) SetSuccess(x interface{}) {
	p.Success = x.(*orderservice2.UpdateOrderStatusResponse)
}

func (p *UpdateOrderStatusResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UpdateOrderStatusResult) GetResult() interface{} {
	return p.Success
}

func deleteOrderHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(orderservice2.DeleteOrderRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(orderservice2.OrderService).DeleteOrder(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *DeleteOrderArgs:
		success, err := handler.(orderservice2.OrderService).DeleteOrder(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*DeleteOrderResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newDeleteOrderArgs() interface{} {
	return &DeleteOrderArgs{}
}

func newDeleteOrderResult() interface{} {
	return &DeleteOrderResult{}
}

type DeleteOrderArgs struct {
	Req *orderservice2.DeleteOrderRequest
}

func (p *DeleteOrderArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(orderservice2.DeleteOrderRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *DeleteOrderArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *DeleteOrderArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *DeleteOrderArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *DeleteOrderArgs) Unmarshal(in []byte) error {
	msg := new(orderservice2.DeleteOrderRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var DeleteOrderArgs_Req_DEFAULT *orderservice2.DeleteOrderRequest

func (p *DeleteOrderArgs) GetReq() *orderservice2.DeleteOrderRequest {
	if !p.IsSetReq() {
		return DeleteOrderArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *DeleteOrderArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *DeleteOrderArgs) GetFirstArgument() interface{} {
	return p.Req
}

type DeleteOrderResult struct {
	Success *orderservice2.DeleteOrderResponse
}

var DeleteOrderResult_Success_DEFAULT *orderservice2.DeleteOrderResponse

func (p *DeleteOrderResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(orderservice2.DeleteOrderResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *DeleteOrderResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *DeleteOrderResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *DeleteOrderResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *DeleteOrderResult) Unmarshal(in []byte) error {
	msg := new(orderservice2.DeleteOrderResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *DeleteOrderResult) GetSuccess() *orderservice2.DeleteOrderResponse {
	if !p.IsSetSuccess() {
		return DeleteOrderResult_Success_DEFAULT
	}
	return p.Success
}

func (p *DeleteOrderResult) SetSuccess(x interface{}) {
	p.Success = x.(*orderservice2.DeleteOrderResponse)
}

func (p *DeleteOrderResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DeleteOrderResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) CreateOrder(ctx context.Context, Req *orderservice2.CreateOrderRequest) (r *orderservice2.CreateOrderResponse, err error) {
	var _args CreateOrderArgs
	_args.Req = Req
	var _result CreateOrderResult
	if err = p.c.Call(ctx, "CreateOrder", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetOrderByID(ctx context.Context, Req *orderservice2.GetOrderRequest) (r *orderservice2.GetOrderResponse, err error) {
	var _args GetOrderByIDArgs
	_args.Req = Req
	var _result GetOrderByIDResult
	if err = p.c.Call(ctx, "GetOrderByID", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateOrderStatus(ctx context.Context, Req *orderservice2.UpdateOrderStatusRequest) (r *orderservice2.UpdateOrderStatusResponse, err error) {
	var _args UpdateOrderStatusArgs
	_args.Req = Req
	var _result UpdateOrderStatusResult
	if err = p.c.Call(ctx, "UpdateOrderStatus", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteOrder(ctx context.Context, Req *orderservice2.DeleteOrderRequest) (r *orderservice2.DeleteOrderResponse, err error) {
	var _args DeleteOrderArgs
	_args.Req = Req
	var _result DeleteOrderResult
	if err = p.c.Call(ctx, "DeleteOrder", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
