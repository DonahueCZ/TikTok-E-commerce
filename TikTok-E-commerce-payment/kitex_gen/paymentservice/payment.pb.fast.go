// Code generated by Fastpb v0.0.2. DO NOT EDIT.

package paymentservice

import (
	paymentservice2 "TikTok-E-commerce-payment/kitex_gen/paymentservice/paymentservice"
	fmt "fmt"
	fastpb "github.com/cloudwego/fastpb"
)

var (
	_ = fmt.Errorf
	_ = fastpb.Skip
)

func (x *paymentservice2.ProcessPaymentRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ProcessPaymentRequest[number], err)
}

func (x *paymentservice2.ProcessPaymentRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.OrderId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *paymentservice2.ProcessPaymentRequest) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Amount, offset, err = fastpb.ReadDouble(buf, _type)
	return offset, err
}

func (x *paymentservice2.ProcessPaymentRequest) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.PaymentMethod, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *paymentservice2.ProcessPaymentResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ProcessPaymentResponse[number], err)
}

func (x *paymentservice2.ProcessPaymentResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Status, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *paymentservice2.ProcessPaymentResponse) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Message, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *paymentservice2.CancelPaymentRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CancelPaymentRequest[number], err)
}

func (x *paymentservice2.CancelPaymentRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.OrderId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *paymentservice2.CancelPaymentResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CancelPaymentResponse[number], err)
}

func (x *paymentservice2.CancelPaymentResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Status, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *paymentservice2.CancelPaymentResponse) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Message, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *paymentservice2.PaymentTimeoutRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_PaymentTimeoutRequest[number], err)
}

func (x *paymentservice2.PaymentTimeoutRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.OrderId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *paymentservice2.PaymentTimeoutResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_PaymentTimeoutResponse[number], err)
}

func (x *paymentservice2.PaymentTimeoutResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Status, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *paymentservice2.PaymentTimeoutResponse) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Message, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *paymentservice2.ProcessPaymentRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *paymentservice2.ProcessPaymentRequest) fastWriteField1(buf []byte) (offset int) {
	if x.OrderId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetOrderId())
	return offset
}

func (x *paymentservice2.ProcessPaymentRequest) fastWriteField2(buf []byte) (offset int) {
	if x.Amount == 0 {
		return offset
	}
	offset += fastpb.WriteDouble(buf[offset:], 2, x.GetAmount())
	return offset
}

func (x *paymentservice2.ProcessPaymentRequest) fastWriteField3(buf []byte) (offset int) {
	if x.PaymentMethod == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetPaymentMethod())
	return offset
}

func (x *paymentservice2.ProcessPaymentResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *paymentservice2.ProcessPaymentResponse) fastWriteField1(buf []byte) (offset int) {
	if x.Status == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetStatus())
	return offset
}

func (x *paymentservice2.ProcessPaymentResponse) fastWriteField2(buf []byte) (offset int) {
	if x.Message == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetMessage())
	return offset
}

func (x *paymentservice2.CancelPaymentRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *paymentservice2.CancelPaymentRequest) fastWriteField1(buf []byte) (offset int) {
	if x.OrderId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetOrderId())
	return offset
}

func (x *paymentservice2.CancelPaymentResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *paymentservice2.CancelPaymentResponse) fastWriteField1(buf []byte) (offset int) {
	if x.Status == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetStatus())
	return offset
}

func (x *paymentservice2.CancelPaymentResponse) fastWriteField2(buf []byte) (offset int) {
	if x.Message == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetMessage())
	return offset
}

func (x *paymentservice2.PaymentTimeoutRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *paymentservice2.PaymentTimeoutRequest) fastWriteField1(buf []byte) (offset int) {
	if x.OrderId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetOrderId())
	return offset
}

func (x *paymentservice2.PaymentTimeoutResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *paymentservice2.PaymentTimeoutResponse) fastWriteField1(buf []byte) (offset int) {
	if x.Status == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetStatus())
	return offset
}

func (x *paymentservice2.PaymentTimeoutResponse) fastWriteField2(buf []byte) (offset int) {
	if x.Message == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetMessage())
	return offset
}

func (x *paymentservice2.ProcessPaymentRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *paymentservice2.ProcessPaymentRequest) sizeField1() (n int) {
	if x.OrderId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetOrderId())
	return n
}

func (x *paymentservice2.ProcessPaymentRequest) sizeField2() (n int) {
	if x.Amount == 0 {
		return n
	}
	n += fastpb.SizeDouble(2, x.GetAmount())
	return n
}

func (x *paymentservice2.ProcessPaymentRequest) sizeField3() (n int) {
	if x.PaymentMethod == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetPaymentMethod())
	return n
}

func (x *paymentservice2.ProcessPaymentResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *paymentservice2.ProcessPaymentResponse) sizeField1() (n int) {
	if x.Status == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetStatus())
	return n
}

func (x *paymentservice2.ProcessPaymentResponse) sizeField2() (n int) {
	if x.Message == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetMessage())
	return n
}

func (x *paymentservice2.CancelPaymentRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *paymentservice2.CancelPaymentRequest) sizeField1() (n int) {
	if x.OrderId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetOrderId())
	return n
}

func (x *paymentservice2.CancelPaymentResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *paymentservice2.CancelPaymentResponse) sizeField1() (n int) {
	if x.Status == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetStatus())
	return n
}

func (x *paymentservice2.CancelPaymentResponse) sizeField2() (n int) {
	if x.Message == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetMessage())
	return n
}

func (x *paymentservice2.PaymentTimeoutRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *paymentservice2.PaymentTimeoutRequest) sizeField1() (n int) {
	if x.OrderId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetOrderId())
	return n
}

func (x *paymentservice2.PaymentTimeoutResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *paymentservice2.PaymentTimeoutResponse) sizeField1() (n int) {
	if x.Status == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetStatus())
	return n
}

func (x *paymentservice2.PaymentTimeoutResponse) sizeField2() (n int) {
	if x.Message == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetMessage())
	return n
}

var fieldIDToName_ProcessPaymentRequest = map[int32]string{
	1: "OrderId",
	2: "Amount",
	3: "PaymentMethod",
}

var fieldIDToName_ProcessPaymentResponse = map[int32]string{
	1: "Status",
	2: "Message",
}

var fieldIDToName_CancelPaymentRequest = map[int32]string{
	1: "OrderId",
}

var fieldIDToName_CancelPaymentResponse = map[int32]string{
	1: "Status",
	2: "Message",
}

var fieldIDToName_PaymentTimeoutRequest = map[int32]string{
	1: "OrderId",
}

var fieldIDToName_PaymentTimeoutResponse = map[int32]string{
	1: "Status",
	2: "Message",
}
