// Code generated by Kitex v0.12.1. DO NOT EDIT.

package paymentservice

import (
	paymentservice2 "TikTok-E-commerce-payment/kitex_gen/paymentservice/paymentservice"
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	proto "google.golang.org/protobuf/proto"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"ProcessPayment": kitex.NewMethodInfo(
		processPaymentHandler,
		newProcessPaymentArgs,
		newProcessPaymentResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"CancelPayment": kitex.NewMethodInfo(
		cancelPaymentHandler,
		newCancelPaymentArgs,
		newCancelPaymentResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"HandlePaymentTimeout": kitex.NewMethodInfo(
		handlePaymentTimeoutHandler,
		newHandlePaymentTimeoutArgs,
		newHandlePaymentTimeoutResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
}

var (
	paymentServiceServiceInfo                = NewServiceInfo()
	paymentServiceServiceInfoForClient       = NewServiceInfoForClient()
	paymentServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return paymentServiceServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return paymentServiceServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return paymentServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "PaymentService"
	handlerType := (*paymentservice2.PaymentService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "paymentservice",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.12.1",
		Extra:           extra,
	}
	return svcInfo
}

func processPaymentHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(paymentservice2.ProcessPaymentRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(paymentservice2.PaymentService).ProcessPayment(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *ProcessPaymentArgs:
		success, err := handler.(paymentservice2.PaymentService).ProcessPayment(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*ProcessPaymentResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newProcessPaymentArgs() interface{} {
	return &ProcessPaymentArgs{}
}

func newProcessPaymentResult() interface{} {
	return &ProcessPaymentResult{}
}

type ProcessPaymentArgs struct {
	Req *paymentservice2.ProcessPaymentRequest
}

func (p *ProcessPaymentArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(paymentservice2.ProcessPaymentRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *ProcessPaymentArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *ProcessPaymentArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *ProcessPaymentArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *ProcessPaymentArgs) Unmarshal(in []byte) error {
	msg := new(paymentservice2.ProcessPaymentRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var ProcessPaymentArgs_Req_DEFAULT *paymentservice2.ProcessPaymentRequest

func (p *ProcessPaymentArgs) GetReq() *paymentservice2.ProcessPaymentRequest {
	if !p.IsSetReq() {
		return ProcessPaymentArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *ProcessPaymentArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ProcessPaymentArgs) GetFirstArgument() interface{} {
	return p.Req
}

type ProcessPaymentResult struct {
	Success *paymentservice2.ProcessPaymentResponse
}

var ProcessPaymentResult_Success_DEFAULT *paymentservice2.ProcessPaymentResponse

func (p *ProcessPaymentResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(paymentservice2.ProcessPaymentResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *ProcessPaymentResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *ProcessPaymentResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *ProcessPaymentResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *ProcessPaymentResult) Unmarshal(in []byte) error {
	msg := new(paymentservice2.ProcessPaymentResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *ProcessPaymentResult) GetSuccess() *paymentservice2.ProcessPaymentResponse {
	if !p.IsSetSuccess() {
		return ProcessPaymentResult_Success_DEFAULT
	}
	return p.Success
}

func (p *ProcessPaymentResult) SetSuccess(x interface{}) {
	p.Success = x.(*paymentservice2.ProcessPaymentResponse)
}

func (p *ProcessPaymentResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ProcessPaymentResult) GetResult() interface{} {
	return p.Success
}

func cancelPaymentHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(paymentservice2.CancelPaymentRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(paymentservice2.PaymentService).CancelPayment(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *CancelPaymentArgs:
		success, err := handler.(paymentservice2.PaymentService).CancelPayment(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CancelPaymentResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newCancelPaymentArgs() interface{} {
	return &CancelPaymentArgs{}
}

func newCancelPaymentResult() interface{} {
	return &CancelPaymentResult{}
}

type CancelPaymentArgs struct {
	Req *paymentservice2.CancelPaymentRequest
}

func (p *CancelPaymentArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(paymentservice2.CancelPaymentRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *CancelPaymentArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *CancelPaymentArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *CancelPaymentArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *CancelPaymentArgs) Unmarshal(in []byte) error {
	msg := new(paymentservice2.CancelPaymentRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CancelPaymentArgs_Req_DEFAULT *paymentservice2.CancelPaymentRequest

func (p *CancelPaymentArgs) GetReq() *paymentservice2.CancelPaymentRequest {
	if !p.IsSetReq() {
		return CancelPaymentArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CancelPaymentArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CancelPaymentArgs) GetFirstArgument() interface{} {
	return p.Req
}

type CancelPaymentResult struct {
	Success *paymentservice2.CancelPaymentResponse
}

var CancelPaymentResult_Success_DEFAULT *paymentservice2.CancelPaymentResponse

func (p *CancelPaymentResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(paymentservice2.CancelPaymentResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *CancelPaymentResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *CancelPaymentResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *CancelPaymentResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *CancelPaymentResult) Unmarshal(in []byte) error {
	msg := new(paymentservice2.CancelPaymentResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CancelPaymentResult) GetSuccess() *paymentservice2.CancelPaymentResponse {
	if !p.IsSetSuccess() {
		return CancelPaymentResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CancelPaymentResult) SetSuccess(x interface{}) {
	p.Success = x.(*paymentservice2.CancelPaymentResponse)
}

func (p *CancelPaymentResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CancelPaymentResult) GetResult() interface{} {
	return p.Success
}

func handlePaymentTimeoutHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(paymentservice2.PaymentTimeoutRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(paymentservice2.PaymentService).HandlePaymentTimeout(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *HandlePaymentTimeoutArgs:
		success, err := handler.(paymentservice2.PaymentService).HandlePaymentTimeout(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*HandlePaymentTimeoutResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newHandlePaymentTimeoutArgs() interface{} {
	return &HandlePaymentTimeoutArgs{}
}

func newHandlePaymentTimeoutResult() interface{} {
	return &HandlePaymentTimeoutResult{}
}

type HandlePaymentTimeoutArgs struct {
	Req *paymentservice2.PaymentTimeoutRequest
}

func (p *HandlePaymentTimeoutArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(paymentservice2.PaymentTimeoutRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *HandlePaymentTimeoutArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *HandlePaymentTimeoutArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *HandlePaymentTimeoutArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *HandlePaymentTimeoutArgs) Unmarshal(in []byte) error {
	msg := new(paymentservice2.PaymentTimeoutRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var HandlePaymentTimeoutArgs_Req_DEFAULT *paymentservice2.PaymentTimeoutRequest

func (p *HandlePaymentTimeoutArgs) GetReq() *paymentservice2.PaymentTimeoutRequest {
	if !p.IsSetReq() {
		return HandlePaymentTimeoutArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *HandlePaymentTimeoutArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *HandlePaymentTimeoutArgs) GetFirstArgument() interface{} {
	return p.Req
}

type HandlePaymentTimeoutResult struct {
	Success *paymentservice2.PaymentTimeoutResponse
}

var HandlePaymentTimeoutResult_Success_DEFAULT *paymentservice2.PaymentTimeoutResponse

func (p *HandlePaymentTimeoutResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(paymentservice2.PaymentTimeoutResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *HandlePaymentTimeoutResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *HandlePaymentTimeoutResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *HandlePaymentTimeoutResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *HandlePaymentTimeoutResult) Unmarshal(in []byte) error {
	msg := new(paymentservice2.PaymentTimeoutResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *HandlePaymentTimeoutResult) GetSuccess() *paymentservice2.PaymentTimeoutResponse {
	if !p.IsSetSuccess() {
		return HandlePaymentTimeoutResult_Success_DEFAULT
	}
	return p.Success
}

func (p *HandlePaymentTimeoutResult) SetSuccess(x interface{}) {
	p.Success = x.(*paymentservice2.PaymentTimeoutResponse)
}

func (p *HandlePaymentTimeoutResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *HandlePaymentTimeoutResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) ProcessPayment(ctx context.Context, Req *paymentservice2.ProcessPaymentRequest) (r *paymentservice2.ProcessPaymentResponse, err error) {
	var _args ProcessPaymentArgs
	_args.Req = Req
	var _result ProcessPaymentResult
	if err = p.c.Call(ctx, "ProcessPayment", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CancelPayment(ctx context.Context, Req *paymentservice2.CancelPaymentRequest) (r *paymentservice2.CancelPaymentResponse, err error) {
	var _args CancelPaymentArgs
	_args.Req = Req
	var _result CancelPaymentResult
	if err = p.c.Call(ctx, "CancelPayment", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) HandlePaymentTimeout(ctx context.Context, Req *paymentservice2.PaymentTimeoutRequest) (r *paymentservice2.PaymentTimeoutResponse, err error) {
	var _args HandlePaymentTimeoutArgs
	_args.Req = Req
	var _result HandlePaymentTimeoutResult
	if err = p.c.Call(ctx, "HandlePaymentTimeout", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
