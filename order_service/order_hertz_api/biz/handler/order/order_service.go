// Code generated by hertz generator.

package order

import (
	"context"

	"order/order_hertz_api/biz/model/order"
	rpcclient "order/order_hertz_api/rpc_client"
	"order/rpc/order/kitex_gen/demo/order_service"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// CreateOrder .
// @router /order [POST]
func CreateOrder(ctx context.Context, c *app.RequestContext) {
	var err error
	var req order.CreateOrderRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	cli, err := rpcclient.GetOrderRpcClient()
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	_, err = cli.CreateOrder(ctx, &order_service.CreateOrderRequest{
		UserId:     req.UserId,
		GoodsId:    req.GoodsId,
		GoodsCount: req.GoodsCount,
		Cost:       req.Cost,
		AddresseeInfo: &order_service.AddresseeInfo{
			Name:    req.Address.Name,
			Phone:   req.Address.Phone,
			Address: req.Address.Address,
		},
	})

	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(order.BaseResponse)

	c.JSON(consts.StatusOK, resp)
}

// GetOrder .
// @router /order [GET]
func GetOrder(ctx context.Context, c *app.RequestContext) {
	var err error
	var req order.OrderRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	cli, err := rpcclient.GetOrderRpcClient()
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	res, err := cli.QueryOrderById(ctx, &order_service.QueryOrderByIdRequest{
		OrderId: req.OrderId,
	})

	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := &order.OrderResponse{
		Order: &order.Order{
			ID:         res.OrderResponse.OrderId,
			UserId:     res.OrderResponse.UserId,
			GoodsId:    res.OrderResponse.GoodsId,
			GoodsCount: res.OrderResponse.GoodsCount,
			Cost:       res.OrderResponse.Cost,
			Status:     res.OrderResponse.Status,
			Address: &order.Address{
				Name:    res.OrderResponse.AddresseeInfo.Name,
				Phone:   res.OrderResponse.AddresseeInfo.Phone,
				Address: res.OrderResponse.AddresseeInfo.Address,
			},
			CreateTime: res.OrderResponse.CreateTime,
		},
	}

	c.JSON(consts.StatusOK, resp)
}

// GetUserOrders .
// @router /user/orders [GET]
func GetUserOrders(ctx context.Context, c *app.RequestContext) {
	var err error
	var req order.UserOrderRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	cli, err := rpcclient.GetOrderRpcClient()
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	res, err := cli.QueryOrdersByUserId(ctx, &order_service.QueryOrdersByUserIdRequest{
		UserId:   req.UserId,
		PageSize: req.Size,
		PageNum:  req.Page,
	})

	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	orders := make([]*order.Order, 0)
	for _, o := range res.OrderResponses {
		orders = append(orders, &order.Order{
			ID:         o.OrderId,
			UserId:     o.UserId,
			GoodsId:    o.GoodsId,
			GoodsCount: o.GoodsCount,
			Cost:       o.Cost,
			Status:     o.Status,
			Address: &order.Address{
				Name:    o.AddresseeInfo.Name,
				Phone:   o.AddresseeInfo.Phone,
				Address: o.AddresseeInfo.Address,
			},
			CreateTime: o.CreateTime,
		})
	}
	resp := &order.OrderListResponse{
		Orders: orders,
	}

	c.JSON(consts.StatusOK, resp)
}

// UpdateOrder .
// @router /order [POST]
func UpdateOrder(ctx context.Context, c *app.RequestContext) {
	var err error
	var req order.UpdateOrderRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	cli, err := rpcclient.GetOrderRpcClient()
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	_, err = cli.UpdateOrder(ctx, &order_service.UpdateOrderRequest{
		OrderId:    req.OrderId,
		GoodsCount: req.GoodsCount,
		Cost:       req.Cost,
		Status:     req.Status,
		AddresseeInfo: &order_service.AddresseeInfo{
			Name:    req.Address.Name,
			Phone:   req.Address.Phone,
			Address: req.Address.Address,
		},
	})
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	resp := new(order.BaseResponse)

	c.JSON(consts.StatusOK, resp)
}

// UpdateOrderStatus .
// @router /order/status [POST]
func UpdateOrderStatus(ctx context.Context, c *app.RequestContext) {
	var err error
	var req order.OrderStatusRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	cli, err := rpcclient.GetOrderRpcClient()
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	_, err = cli.UpdateOrderStatus(ctx, &order_service.UpdateOrderStatusRequest{
		OrderId: req.OrderId,
		Status:  req.Status,
	})
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(order.BaseResponse)

	c.JSON(consts.StatusOK, resp)
}

// UpdateOrderAddress .
// @router /order/address [POST]
func UpdateOrderAddress(ctx context.Context, c *app.RequestContext) {
	var err error
	var req order.OrderAddressRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	cli, err := rpcclient.GetOrderRpcClient()
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	_, err = cli.UpdateOrderAddresseeInfo(ctx, &order_service.UpdateOrderAddresseeInfoRequest{
		OrderId: req.OrderId,
		AddresseeInfo: &order_service.AddresseeInfo{
			Name:    req.Address.Name,
			Phone:   req.Address.Phone,
			Address: req.Address.Address,
		},
	})
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(order.BaseResponse)

	c.JSON(consts.StatusOK, resp)
}
